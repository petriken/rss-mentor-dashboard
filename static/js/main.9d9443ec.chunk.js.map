{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["mentorsList","dataFile","Object","keys","data","mentors","currentMentor","i","length","mentorLogin","mentorObject","value","label","push","task","tasksStatus","taskName","entries","getTaskName","name","values","getTaskStatus","replace","getStudenName","studentName","mentor","getStudentUrl","mentorStudents","getScore","currentTaskName","score","getPrTask","pr","getCurrentMentor","localStorage","getItem","getStudent","students","setTask","map","react_default","a","createElement","key","className","href","style","textAlign","setScore","App","state","selectedOption","handleChange","_this","setState","setItem","this","react_select_esm","onChange","options","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9d9443ec.chunk.js","sourcesContent":["/* eslint-disable no-console */\r\n// import React, { Component } from 'react';\r\nimport './App.scss';\r\nimport React, { Col } from 'react';\r\nimport Select from 'react-select';\r\nimport data from './data.json';\r\n\r\nconst mentorsList = [];\r\nconst dataFile = Object.keys(data.mentors);\r\nlet currentMentor = '';\r\n\r\n// eslint-disable-next-line\r\nfor (let i = 0; i < dataFile.length; i++) {\r\n  const mentorLogin = dataFile[i];\r\n  const mentorObject = {};\r\n\r\n  mentorObject.value = mentorLogin;\r\n  mentorObject.label = mentorLogin;\r\n  mentorsList.push(mentorObject);\r\n}\r\n\r\nconst task = Object.keys(data.tasksStatus);\r\n\r\nconst taskName = Object.entries(data)[1][1];\r\n\r\nfunction getTaskName(name) {\r\n  const getUrl = Object.values(taskName[name]);\r\n  return getUrl[2];\r\n}\r\n\r\nfunction getTaskStatus(name) {\r\n  const getStatus = Object.values(taskName[name]);\r\n  return getStatus[1].replace(/\\s+/g, '')+ ' taskname';\r\n}\r\n\r\nfunction getStudenName(studentName, mentor) {\r\n  const getStudentUrl = Object.values(\r\n    data.mentors[mentor].mentorStudents[studentName],\r\n  );\r\n  const studentGithubUrl = Object.entries(getStudentUrl)[1][1];\r\n  return studentGithubUrl;\r\n}\r\n\r\nfunction getScore(studentName, mentor, currentTaskName) {\r\n  const getStudentUrl = Object.values(\r\n    data.mentors[mentor].mentorStudents[studentName],\r\n  );\r\n  const score = Object.entries(getStudentUrl)[3][1][currentTaskName];\r\n    if (score) {\r\n     return score;\r\n  } \r\n  // return score;\r\n}\r\n\r\nfunction getPrTask(studentName, mentor, currentTaskName) {\r\n  const getStudentUrl = Object.values(\r\n    data.mentors[mentor].mentorStudents[studentName],\r\n  );\r\n  const pr = Object.entries(getStudentUrl)[4][1][currentTaskName];\r\n  const score = Object.entries(getStudentUrl)[3][1][currentTaskName];\r\n\r\n  if (!score || score === 0) {\r\n    return '#';\r\n  }\r\n  return pr;\r\n}\r\n\r\nfunction getCurrentMentor(mentor) {\r\n  if (localStorage.getItem('currentMentor')) {\r\n    currentMentor = localStorage.getItem('currentMentor');\r\n  }\r\n  if (mentor) {\r\n    currentMentor = mentor.value;\r\n  }\r\n  return currentMentor;\r\n}\r\n\r\nconst getStudent = (mentor) => {\r\n  let students = [];\r\n  if (localStorage.getItem('currentMentor')) {\r\n    currentMentor = localStorage.getItem('currentMentor');\r\n    students = Object.keys(data.mentors[currentMentor].mentorStudents);\r\n  }\r\n  if (mentor) {\r\n    currentMentor = mentor.value;\r\n    students = Object.keys(data.mentors[currentMentor].mentorStudents);\r\n  }\r\n  return students;\r\n};\r\n\r\nfunction setStudent(mentor) {\r\n  return getStudent(mentor).map(studentName => (\r\n    <td className=\"studentName cell\" key={studentName}>\r\n      <a\r\n        className=\"link\"\r\n        href={getStudenName(studentName, getCurrentMentor(mentor))}\r\n      >\r\n        {studentName}\r\n      </a>\r\n    </td>\r\n  ));\r\n}\r\n\r\nfunction setScore(mentor, name) {\r\n  return getStudent(mentor).map(studentName => (\r\n    <td style={{ textAlign: 'center' }} className={!getScore(studentName, getCurrentMentor(mentor), name) && getTaskStatus(name) === 'Checked taskname' ? 'failed' : getTaskStatus(name)} key={studentName}><a\r\n      className=\"link\" href={getPrTask(studentName, getCurrentMentor(mentor), name)}\r\n    >{getScore(studentName, getCurrentMentor(mentor), name)}\r\n    </a>\r\n    </td>\r\n  ));\r\n}\r\n\r\nfunction setTask(mentor) {\r\n  return task.map(name => (\r\n    <tr key={name}>\r\n      <td className={getTaskStatus(name)}>\r\n        <a className=\"link taskname\" href={getTaskName(name)}>\r\n          {name}\r\n        </a>\r\n      </td>\r\n      {setScore(mentor, name)}\r\n    </tr>\r\n  ));\r\n}\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    selectedOption: null,\r\n  };\r\n\r\n  handleChange = (selectedOption) => {\r\n    this.setState({ selectedOption });\r\n    localStorage.setItem('currentMentor', selectedOption.value);\r\n  };\r\n\r\n  render() {\r\n    const { selectedOption } = this.state;\r\n\r\n    return (\r\n      \r\n      <div className=\"App\">\r\n        <Select\r\n          value={selectedOption}\r\n          onChange={this.handleChange}\r\n          options={mentorsList}\r\n        />\r\n\r\n        <table className=\"table mentor-table\">\r\n          <thead className=\"thead\">\r\n            <tr>\r\n              <td className=\"mentorTitle\">Ментор</td>\r\n              <td className=\"mentorName\">{getCurrentMentor(selectedOption)}</td>\r\n            </tr>\r\n          </thead>\r\n        </table>\r\n<div className=\"wrapper\">\r\n        <table className=\"table task-table\">\r\n          <thead>\r\n            <tr>\r\n              <td />\r\n              {setStudent(selectedOption)}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {setTask(selectedOption)}\r\n          </tbody>\r\n        </table>\r\n        </div>\r\n        {/* <Col xs=\"12\" sm=\"6\" md=\"6\" lg=\"4\"> */}\r\n        <table className=\"table description-table\">\r\n          <tbody className=\"tbody\">\r\n            <tr>\r\n              <td className=\"Checked description-table__cell\"></td>\r\n              <td className=\"description-table__cell\">Checked by mentor</td>\r\n            </tr>\r\n            <tr>\r\n              <td className=\"Checking description-table__cell\"></td>\r\n              <td className=\"description-table__cell\">Checking by mentor</td>\r\n            </tr>\r\n            <tr>\r\n              <td className=\"InProgress description-table__cell\"></td>\r\n              <td className=\"description-table__cell\">In Progress</td>\r\n            </tr>\r\n            <tr>\r\n              <td className=\"ToDo description-table__cell\"></td>\r\n              <td className=\"description-table__cell\">ToDo</td>\r\n            </tr>\r\n            <tr>\r\n              <td className=\"failed description-table__cell\"></td>\r\n              <td className=\"description-table__cell\">No solution</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n        {/* </Col> */}\r\n\r\n      </div>\r\n      \r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}