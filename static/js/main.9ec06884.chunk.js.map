{"version":3,"sources":["C:/Users/Петр/petriken-2018Q3/rss-mentor-dashboard/src/App.js","C:/Users/Петр/petriken-2018Q3/rss-mentor-dashboard/src/serviceWorker.js","C:/Users/Петр/petriken-2018Q3/rss-mentor-dashboard/src/index.js"],"names":["mentorsList","dataFile","Object","keys","data","mentors","currentMentor","i","length","mentorLogin","mentorObject","value","label","push","task","tasksStatus","taskName","entries","getTaskName","name","values","getTaskStatus","replace","getStudenName","studentName","mentor","getStudentUrl","mentorStudents","getScore","currentTaskName","score","getCurrentMentor","localStorage","getItem","getStudent","students","setTask","map","react_default","a","createElement","key","style","minWidth","className","href","textAlign","setScore","App","state","selectedOption","handleChange","_this","setState","setItem","this","react_select_esm","onChange","options","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9ec06884.chunk.js","sourcesContent":["/* eslint-disable no-console */\n// import React, { Component } from 'react';\nimport './App.scss';\nimport React from 'react';\nimport Select from 'react-select';\nimport data from './data.json';\n\nconst mentorsList = [];\nconst dataFile = Object.keys(data.mentors);\nlet currentMentor = '';\n\n// eslint-disable-next-line\nfor (let i = 0; i < dataFile.length; i++) {\n  const mentorLogin = dataFile[i];\n  const mentorObject = {};\n\n  mentorObject.value = mentorLogin;\n  mentorObject.label = mentorLogin;\n  mentorsList.push(mentorObject);\n}\n\nconst task = Object.keys(data.tasksStatus);\n\nconst taskName = Object.entries(data)[1][1];\n\nfunction getTaskName(name) {\n  const getUrl = Object.values(taskName[name]);\n  return getUrl[2];\n}\n\nfunction getTaskStatus(name) {\n  const getStatus = Object.values(taskName[name]);\n  return getStatus[1].replace(/\\s+/g, '');\n}\n\nfunction getStudenName(studentName, mentor) {\n  const getStudentUrl = Object.values(\n    data.mentors[mentor].mentorStudents[studentName],\n  );\n  const studentGithubUrl = Object.entries(getStudentUrl)[1][1];\n  return studentGithubUrl;\n}\n\nfunction getScore(studentName, mentor, currentTaskName) {\n  const getStudentUrl = Object.values(\n    data.mentors[mentor].mentorStudents[studentName],\n  );\n  const score = Object.entries(getStudentUrl)[3][1][currentTaskName];\n  if (!score) {\n    return ' ';\n  }\n  return score;\n}\n\nfunction getCurrentMentor(mentor) {\n  if (localStorage.getItem('currentMentor')) {\n    currentMentor = localStorage.getItem('currentMentor');\n  }\n  if (mentor) {\n    currentMentor = mentor.value;\n  }\n  return currentMentor;\n}\n\nconst getStudent = (mentor) => {\n  let students = [];\n  if (localStorage.getItem('currentMentor')) {\n    currentMentor = localStorage.getItem('currentMentor');\n    students = Object.keys(data.mentors[currentMentor].mentorStudents);\n  }\n  if (mentor) {\n    currentMentor = mentor.value;\n    students = Object.keys(data.mentors[currentMentor].mentorStudents);\n  }\n  return students;\n};\n\nfunction setStudent(mentor) {\n  return getStudent(mentor).map(studentName => (\n    <td className=\"studentName cell\" key={studentName}>\n      <a\n        className=\"link\"\n        href={getStudenName(studentName, getCurrentMentor(mentor))}\n      >\n        {studentName}\n      </a>\n    </td>\n  ));\n}\n\nfunction setScore(mentor, name) {\n  return getStudent(mentor).map(studentName => (\n    <td style={{ minWidth: '100px', textAlign: 'center' }} className={getScore(studentName, getCurrentMentor(mentor), name) <= 0 && getTaskStatus(name) === 'Checked' ? 'failed' : getTaskStatus(name)} key={studentName}>\n      {getScore(studentName, getCurrentMentor(mentor), name)}\n    </td>\n  ));\n}\n\nfunction setTask(mentor) {\n  return task.map(name => (\n    <tr key={name}>\n      <td style={{ minWidth: '280px' }} className={getTaskStatus(name)}>\n        <a className=\"link\" href={getTaskName(name)}>\n          {name}\n        </a>\n      </td>\n      {setScore(mentor, name)}\n    </tr>\n  ));\n}\n\nclass App extends React.Component {\n  state = {\n    selectedOption: null,\n  };\n\n  handleChange = (selectedOption) => {\n    this.setState({ selectedOption });\n    localStorage.setItem('currentMentor', selectedOption.value);\n  };\n\n  render() {\n    const { selectedOption } = this.state;\n\n    return (\n      <div className=\"App\">\n        <Select\n          value={selectedOption}\n          onChange={this.handleChange}\n          options={mentorsList}\n        />\n\n        <table className=\"table mentor-table\">\n          <thead className=\"thead\">\n            <tr>\n              <td className=\"mentorTitle\">Ментор</td>\n              <td className=\"mentorName\">{getCurrentMentor(selectedOption)}</td>\n            </tr>\n          </thead>\n        </table>\n\n        <table className=\"table task-table\">\n          <thead>\n            <tr>\n              <td />\n              {setStudent(selectedOption)}\n            </tr>\n          </thead>\n          <tbody>\n            {setTask(selectedOption)}\n          </tbody>\n        </table>\n\n        <table className=\"table description-table\">\n          <tbody className=\"tbody\">\n            <tr>\n              <td className=\"Checked description-table__cell\"></td>\n              <td className=\"description-table__cell\">Checked by mentor</td>\n            </tr>\n            <tr>\n              <td className=\"Checking description-table__cell\"></td>\n              <td className=\"description-table__cell\">Checking by mentor</td>\n            </tr>\n            <tr>\n              <td className=\"InProgress description-table__cell\"></td>\n              <td className=\"description-table__cell\">In Progress</td>\n            </tr>\n            <tr>\n              <td className=\"ToDo description-table__cell\"></td>\n              <td className=\"description-table__cell\">ToDo</td>\n            </tr>\n            <tr>\n              <td className=\"failed description-table__cell\"></td>\n              <td className=\"description-table__cell\">No solution</td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}